<?php
/**
 * The extremely beautiful code below will output PHP array elements that are ready to copy-paste.
 *
 * Instructions:
 * - Run the script like this: `php generate-phpstorm-metadata.php > ~/phpstorm-metadata.txt`
 * - Copy the output into .phpstorm.meta.php, below the 'automatically generated' comment in the file
 */

$overrides = [
    'license' => 'PlgSystemJoomlatoolsupdaterLicense',
    'lib:manager' => 'KObjectManager',
    'lib:object.manager' => 'KObjectManager',
    'lib:request' => 'ComKoowaDispatcherRequest',
    'lib:response' => 'ComKoowaDispatcherResponse',
    'lib:dispatcher' => 'KDispatcherInterface',
    'lib:user' => 'ComKoowaUser',
    'com://admin/docman.database.table.files' => 'KDatabaseTableDefault',
    'com://admin/docman.database.table.folders' => 'KDatabaseTableDefault',
    'com://admin/docman.database.table.category_folders' => 'KDatabaseTableDefault',
    'com://admin/docman.controller.scan' => 'KControllerModel',
];  

foreach ($overrides as $key => $value) {
    $overrides[$key] = "'$key' => \\$value::class";
    if (strpos($key, 'lib:') === 0) {
        $overrides[substr($key, 4)] = "'".substr($key, 4)."' => \\$value::class";
    }
}

$manualMap = array_reduce($overrides, function($carry, $item) {
    return $carry . "\t\t\t$item,\n";
}, '');

$tmpl = <<<TMPL
<?php
/**
 * PHPStorm auto-complete metadata. See the scripts/generate-phpstorm-metadata.php file for more information
 */
namespace PHPSTORM_META {
    override( \KObject::getObject(0), map([
        // manually added
        $manualMap

        // automatically generated
        __AUTOMATIC__
    ]));
    override( \KBehaviorAbstract::getObject(0), map([
        // manually added
        $manualMap

        // automatically generated
        __AUTOMATIC__
    ]));
    override( \KObjectManager::getObject(0), map([
        // manually added
        $manualMap

        // automatically generated
        __AUTOMATIC__
    ]));
}
TMPL;

$projectsDir = realpath(__DIR__.'/../..');

$directories = [
    $projectsDir.'/joomlatools-framework/code/libraries/joomlatools/library',
    $projectsDir.'/joomlatools-framework/code/libraries/joomlatools/component/koowa',
    $projectsDir.'/joomlatools-framework/code/libraries/joomlatools-components/activities',
    $projectsDir.'/joomlatools-framework/code/libraries/joomlatools-components/files',
    $projectsDir.'/joomlatools-framework/code/libraries/joomlatools-components/migrator',
    $projectsDir.'/joomlatools-framework/code/libraries/joomlatools-components/scheduler',
    $projectsDir.'/joomlatools-framework/code/libraries/joomlatools-components/tags',
    $projectsDir.'/docman',
    $projectsDir.'/fileman',
    $projectsDir.'/leadman',
    $projectsDir.'/logman',
    $projectsDir.'/textman',
];

$skip_classes = ['Koowa'];
$skip_identifiers = ['user'];

/*
 * ------
 */

$classes = [];

foreach ($directories as $directory) {
    getClassesInDirectory($directory, $classes, $projectsDir);
}

//sort($classes);

//var_dump($classes);

$map = [];
foreach ($classes as $filePath => $className) {
	if (in_array($className, $skip_classes)) {
	    continue;
    }

    $identifier = convertClassToIdentifier($className, $filePath);

    if ($identifier === null) {
        echo "Could not convert class $className in file $filePath\n";
        continue;
    }

    if (in_array($identifier, $skip_identifiers)) {
        continue;
    }

    if (substr($identifier, 0, 3) === "lib") {
        $map[substr($identifier, 4)] = '\\'.$className;
    }

    $map[$identifier] = '\\'.$className;
}

ksort($map);

//var_dump($map);

$autoGenerated = "";
foreach ($map as $i => $cls) {
    if (in_array($i, $skip_identifiers)) {
        continue;
    }

    $autoGenerated .= "\t\t\t'$i' => $cls::class,\n";
}

$template = str_replace('__AUTOMATIC__', $autoGenerated, $tmpl);
file_put_contents(__DIR__.'/../.phpstorm.meta.php', $template);


function convertClassToIdentifier($className, $filePath) {
    $className = trim($className);

    if ($className[0] === 'K') {
        $identifier = strtolower(preg_replace('/(?<=\\w)([A-Z])/', '.\\1', substr($className, 1)));
        $identifier = str_replace('/', '.', $identifier);
        $identifier = str_replace('\\', '.', $identifier);
        return "lib:".$identifier;
    } elseif (substr($className, 0, 3) === 'Com') { 
        $identifier = strtolower(preg_replace('/(?<=\\w)([A-Z])/', '.\\1', substr($className, 3)));
        $identifier = str_replace('/', '.', $identifier);
        $identifier = str_replace('\\', '.', $identifier);

        $suffix = "";
        if (strpos($filePath, 'administrator/') !== false) {
            $suffix = "//admin/";
        } else if (strpos($filePath, 'site/') !== false) {
            $suffix = "//site/";
        }

        return 'com:'.$suffix.$identifier;
    } elseif (substr($className, 0, 3) === 'Plg') {
        $identifier = strtolower(preg_replace('/(?<=\\w)([A-Z])/', '.\\1', substr($className, 3)));
        $identifier = str_replace('/', '.', $identifier);
        $identifier = str_replace('\\', '.', $identifier);
        return 'plg:'.$identifier;
    } elseif (substr($className, 0, 3) === 'Mod') {
        $identifier = strtolower(preg_replace('/(?<=\\w)([A-Z])/', '.\\1', substr($className, 3)));
        $identifier = str_replace('/', '.', $identifier);
        $identifier = str_replace('\\', '.', $identifier);
        return 'mod:'.$identifier;
    }

    return null;
}

function getClassesInDirectory($directory, &$classes, $projectsDir)
{
    $it = new RecursiveDirectoryIterator($directory);
    $it = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::LEAVES_ONLY);
    $it = new RegexIterator($it, '(\.' . preg_quote('php') . '$)');

    $p = '#(?<!abstract )class\s+((?:K|Com|Plg|Mod)[A-Za-z0-9_\-]+)\s+(?:extends|implements|\{)#';

    /** @var SplFileInfo $file */
    foreach ($it as $file) {
        $contents = file_get_contents($file);
        preg_match($p, $contents, $matches);
        if ($matches) {
            $classes[str_replace($projectsDir."/", '', $file->getPathname())] = $matches[1];
        }
    }
}
